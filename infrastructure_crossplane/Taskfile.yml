version: '3'

vars:
  CROSSPLANE_VERSION: 2.0.2
  AWS_PROVIDER_VERSION: v2.1.0
  NAMESPACE: default

tasks:
  setup:
    desc: Set up Crossplane v2 in the current context
    cmds:
      - task: install:crossplane
      - task: install:packages
      - task: wait:ready

  install:crossplane:
    desc: Install Crossplane v2 using Helm
    cmds:
      - |
        echo "Installing Crossplane v{{.CROSSPLANE_VERSION}}..."
        helm repo add crossplane-stable https://charts.crossplane.io/stable
        helm repo update

        # Install
        helm install crossplane crossplane-stable/crossplane \
          --namespace crossplane-system \
          --create-namespace \
          --version {{.CROSSPLANE_VERSION}} \
          --wait \
          --timeout 600s

  install:packages:
    desc: Install AWS provider for Crossplane v2
    cmds:
      - |
        echo "Installing Crossplane Packages"

        kubectl apply -f providers.yaml
        kubectl apply -f functions.yaml

  wait:ready:
    desc: Wait for Crossplane to be ready
    cmds:
      - |
        kubectl wait provider.pkg --all --for=condition=Healthy --timeout 5m
        kubectl wait provider.pkg --all --for=condition=Installed --timeout 5m
        kubectl wait function.pkg --all --for=condition=Healthy --timeout 5m
        kubectl wait function.pkg --all --for=condition=Installed --timeout 5m

  setup:providerconfigs:
    desc: Set up providerconfigs
    cmds:
      - |
        kubectl apply -f provider-config.yaml

        if [[ -z "$AWS_ACCESS_KEY_ID" || -z "$AWS_SECRET_ACCESS_KEY" ]]; then
          echo "Please set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment variables"
          exit 1
        fi
        echo "Creating AWS credentials secret..."
        kubectl create secret generic aws-secret -n crossplane-system \
          --from-literal=credentials="[default]
        aws_access_key_id = $AWS_ACCESS_KEY_ID
        aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" \
          --dry-run=client -o yaml | kubectl apply -f -

  deploy:
    desc: Deploy infrastructure for specified environment
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "dev"}}'
    cmds:
      - |
        echo "Deploying infrastructure for environment: {{.ENVIRONMENT}}"

        # Apply composite resource definition
        echo "Applying composite resource definition..."
        kubectl apply -f xrd.yaml --validate=false || \
        kubectl replace -f xrd.yaml --validate=false

        # Wait for CRD to be established
        echo "Waiting for CRD to be established..."
        kubectl wait --for condition=established --timeout=60s crd/xuseradminmessagings.clc.lockhead.cloud

        # Apply composition
        echo "Applying composition..."
        kubectl apply -f composition.yaml --validate=false || \
        kubectl replace -f composition.yaml --validate=false

        # Apply environment-specific claim
        echo "Applying xr scope cluster for environment: {{.ENVIRONMENT}}"
        if [[ -f "xrs/xr-{{.ENVIRONMENT}}.yaml" ]]; then
          kubectl apply -f "xrs/xr-{{.ENVIRONMENT}}.yaml" --validate=false || \
          kubectl replace -f "xrs/xr-{{.ENVIRONMENT}}.yaml" --validate=false
        else
          echo "XR file for environment {{.ENVIRONMENT}} not found. Available: dev, staging, prod"
          exit 1
        fi

  status:
    desc: Check deployment status
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "dev"}}'
    cmds:
      - |
        echo "=== Crossplane Package Status ==="
        kubectl get pkgrev
        echo ""
        echo "=== XRs Scope Cluster ==="
        kubectl get xuseradminmessaging
        echo ""
        echo "=== Environment: {{.ENVIRONMENT}} ==="
        kubectl describe xuseradminmessaging user-admin-messaging-{{.ENVIRONMENT}} || echo "Environment {{.ENVIRONMENT}} not found"

  logs:
    desc: Show Crossplane logs
    cmds:
      - kubectl logs -l app=crossplane -n crossplane-system --tail=50

  cleanup:
    desc: Clean up Crossplane resources
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "dev"}}'
    cmds:
      - |
        echo "Cleaning up environment: {{.ENVIRONMENT}}"
        kubectl delete -f "xrs/xr-{{.ENVIRONMENT}}.yaml" --ignore-not-found=true

  cleanup:all:
    desc: Clean up all Crossplane resources and uninstall
    cmds:
      - task: cleanup
        vars:
          ENVIRONMENT: dev
      - task: cleanup
        vars:
          ENVIRONMENT: staging
      - task: cleanup
        vars:
          ENVIRONMENT: prod
      - |
        echo "Uninstalling Compositions..."
        kubectl delete -f compositon.yaml
        echo "Uninstalling XRDs..."
        kubectl delete -f xrd.yaml
        echo "Uninstalling Packages..."
        kubectl delete -f functions.yaml
        kubectl delete -f provider-config.yaml
        kubectl delete -f providers.yaml
        echo "Uninstalling Crossplane..."
        helm uninstall crossplane -n crossplane-system || echo "Crossplane not installed"
        kubectl delete namespace crossplane-system --ignore-not-found=true

  dev:shell:
    desc: Open a shell with kubectl configured for this environment
    cmds:
      - |
        echo "Opening shell with kubectl configured..."
        echo "Use 'kubectl get xuseradminmessaging' to check your deployments"
        bash