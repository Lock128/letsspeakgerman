{
  "name": "user-admin-messaging",
  "version": "1.0.0",
  "description": "Real-time messaging application between user and admin interfaces",
  "private": true,
  "workspaces": [
    "infrastructure",
    "lambda",
    "frontend/shared",
    "frontend/user",
    "frontend/admin"
  ],
  "scripts": {
    "install-all": "npm install && npm run install:infrastructure && npm run install:lambda && npm run install:frontend",
    "install:infrastructure": "cd infrastructure && npm install",
    "install:lambda": "cd lambda && npm install",
    "install:frontend": "cd frontend/user && npm install && cd ../admin && npm install",
    "build": "npm run build:lambda && npm run build:frontend && npm run build:infrastructure",
    "build:infrastructure": "cd infrastructure && npm run build",
    "build:lambda": "cd lambda && npm run build",
    "build:frontend": "cd frontend && ./scripts/build-all.sh",
    "build:frontend:clean": "cd frontend && ./scripts/build-all.sh --clean",
    "watch:frontend": "cd frontend && ./scripts/build-all.sh --watch",
    "test": "npm run test:infrastructure && npm run test:lambda && npm run test:frontend",
    "test:infrastructure": "cd infrastructure && npm test",
    "test:lambda": "cd lambda && npm test",
    "test:frontend": "cd frontend/user && npm test && cd ../admin && npm test",
    "test:websocket": "node scripts/test-websocket.js",
    "test:websocket:dev": "node scripts/test-websocket.js dev",
    "test:websocket:staging": "node scripts/test-websocket.js staging",
    "test:websocket:prod": "node scripts/test-websocket.js prod",
    "deploy": "cd infrastructure && npm run deploy",
    "deploy:dev": "cd infrastructure && npm run deploy:dev",
    "deploy:staging": "cd infrastructure && npm run deploy:staging",
    "deploy:prod": "cd infrastructure && npm run deploy:prod",
    "destroy": "cd infrastructure && npm run destroy",
    "destroy:dev": "cd infrastructure && npm run destroy:dev",
    "destroy:staging": "cd infrastructure && npm run destroy:staging",
    "destroy:prod": "cd infrastructure && npm run destroy:prod",
    "bootstrap": "cd infrastructure && npm run bootstrap",
    "bootstrap:dev": "cd infrastructure && npm run bootstrap:dev",
    "bootstrap:staging": "cd infrastructure && npm run bootstrap:staging",
    "bootstrap:prod": "cd infrastructure && npm run bootstrap:prod",
    "deploy:frontend": "cd frontend && ./scripts/deploy-all.sh",
    "deploy:frontend:dev": "cd frontend && ./scripts/deploy-all.sh --environment dev",
    "deploy:frontend:staging": "cd frontend && ./scripts/deploy-all.sh --environment staging",
    "deploy:frontend:prod": "cd frontend && ./scripts/deploy-all.sh --environment prod",
    "configure:endpoints": "cd frontend && node scripts/configure-endpoints.js",
    "configure:endpoints:dev": "cd frontend && node scripts/configure-endpoints.js dev",
    "configure:endpoints:staging": "cd frontend && node scripts/configure-endpoints.js staging",
    "configure:endpoints:prod": "cd frontend && node scripts/configure-endpoints.js prod",
    "deploy:complete": "./scripts/deploy-complete.sh",
    "deploy:complete:dev": "./scripts/deploy-complete.sh --environment dev",
    "deploy:complete:staging": "./scripts/deploy-complete.sh --environment staging",
    "deploy:complete:prod": "./scripts/deploy-complete.sh --environment prod",
    "clean": "npm run clean:infrastructure && npm run clean:lambda && npm run clean:frontend",
    "clean:infrastructure": "cd infrastructure && rm -rf lib cdk.out",
    "clean:lambda": "cd lambda && npm run clean",
    "clean:frontend": "cd frontend/user && npm run clean && cd ../admin && npm run clean",
    "k8s:build": "make build-all",
    "k8s:deploy": "./k8s/deploy.sh",
    "k8s:deploy:dev": "./k8s/scripts/deploy-environment.sh development",
    "k8s:deploy:staging": "./k8s/scripts/deploy-environment.sh staging",
    "k8s:deploy:prod": "./k8s/scripts/deploy-environment.sh production --force",
    "k8s:build-deploy": "./k8s/scripts/build-and-deploy.sh",
    "k8s:build-deploy:dev": "./k8s/scripts/build-and-deploy.sh -e development -n dev",
    "k8s:build-deploy:staging": "./k8s/scripts/build-and-deploy.sh -e staging -n staging",
    "k8s:build-deploy:prod": "./k8s/scripts/build-and-deploy.sh -e production -n production",
    "k8s:validate": "./k8s/scripts/validate-deployment.sh",
    "k8s:validate:dev": "./k8s/scripts/validate-deployment.sh -n dev",
    "k8s:validate:staging": "./k8s/scripts/validate-deployment.sh -n staging",
    "k8s:validate:prod": "./k8s/scripts/validate-deployment.sh -n production",
    "k8s:undeploy": "kubectl delete -f k8s/",
    "k8s:undeploy:dev": "kubectl delete namespace dev --ignore-not-found=true",
    "k8s:undeploy:staging": "kubectl delete namespace staging --ignore-not-found=true",
    "k8s:undeploy:prod": "kubectl delete namespace production --ignore-not-found=true",
    "k8s:logs": "kubectl logs -f deployment/websocket-service",
    "k8s:logs:dev": "kubectl logs -f deployment/websocket-service -n dev",
    "k8s:logs:staging": "kubectl logs -f deployment/websocket-service -n staging",
    "k8s:logs:prod": "kubectl logs -f deployment/websocket-service -n production",
    "k8s:status": "kubectl get pods,services,ingress,hpa",
    "k8s:status:dev": "kubectl get pods,services,ingress,hpa -n dev",
    "k8s:status:staging": "kubectl get pods,services,ingress,hpa -n staging",
    "k8s:status:prod": "kubectl get pods,services,ingress,hpa -n production",
    "dev:local": "make dev",
    "dev:docker": "docker compose up --build || docker-compose up --build",
    "dev:docker:down": "docker compose down 2>/dev/null || docker-compose down",
    "dev:docker:logs": "docker compose logs -f 2>/dev/null || docker-compose logs -f",
    "dev:k8s": "./k8s/scripts/setup-local-cluster.sh && npm run k8s:build-deploy:dev"
  },
  "devDependencies": {
    "typescript": "^5.0.0",
    "ws": "^8.14.0",
    "@types/ws": "^8.5.0"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}