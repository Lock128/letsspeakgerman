version: '3.8'

# Production configuration for docker-compose
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # Production Redis configuration
  redis:
    image: redis:7-alpine
    container_name: user-admin-messaging-redis-prod
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_prod_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - user-admin-messaging
    # Don't expose Redis port in production
    ports: []

  # Production WebSocket service
  websocket:
    image: ${DOCKER_REGISTRY:-user-admin-messaging}/websocket:${TAG:-latest}
    container_name: user-admin-messaging-websocket-prod
    restart: always
    environment:
      - DEPLOYMENT_MODE=kubernetes
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - PORT=8080
      - HEALTH_PORT=8081
      - NODE_ENV=production
      - LOG_LEVEL=info
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - user-admin-messaging
    # Resource limits for production
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    # Don't expose ports directly in production
    ports: []

  # Production user frontend
  user-frontend:
    image: ${DOCKER_REGISTRY:-user-admin-messaging}/user-frontend:${TAG:-latest}
    container_name: user-admin-messaging-user-frontend-prod
    restart: always
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - user-admin-messaging
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M
    ports: []

  # Production admin frontend
  admin-frontend:
    image: ${DOCKER_REGISTRY:-user-admin-messaging}/admin-frontend:${TAG:-latest}
    container_name: user-admin-messaging-admin-frontend-prod
    restart: always
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - user-admin-messaging
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M
    ports: []

  # Production Nginx with SSL termination
  nginx:
    image: nginx:alpine
    container_name: user-admin-messaging-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - websocket
      - user-frontend
      - admin-frontend
    networks:
      - user-admin-messaging
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  redis_prod_data:
    driver: local

networks:
  user-admin-messaging:
    driver: bridge
    name: user-admin-messaging-prod-network