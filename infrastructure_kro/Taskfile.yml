version: '3'

vars:
  KRO_VERSION: latest
  NAMESPACE: default
  AWS_CREDENTIALS_PATH: '{{.AWS_CREDENTIALS_PATH | default "~/.aws/credentials"}}'
  CONTROLLER_NAMESPACE: ack-system

tasks:
  setup:
    desc: Set up KRO and ACK controllers in the current cluster
    cmds:
      - task: install:kro
      - task: install:ack-controllers
      - task: wait:ready

  install:kro:
    desc: Install Kro (Kube Resource Orchestrator)
    cmds:
      - |
        echo "Installing Kro..."

        export KRO_VERSION=$(curl -sL \
          https://api.github.com/repos/kubernetes-sigs/kro/releases/latest | \
          jq -r '.tag_name | ltrimstr("v")'
        )
        echo $KRO_VERSION

        helm install kro oci://registry.k8s.io/kro/charts/kro \
        --namespace kro-system \
        --create-namespace \
        --version=${KRO_VERSION}

  install:ack-controllers:
    desc: Install ACK (AWS Controllers for Kubernetes) controllers
    cmds:
      - |
        echo "Creating ACK system namespace..."
        kubectl create namespace ack-system --dry-run=client -o yaml | kubectl apply -f -
        export CONTROLLER_NAMESPACE=ack-system
        echo "Installing ACK Controllers using Helm with OCI registries..."
        
        # Install DynamoDB Controller
        echo "Installing DynamoDB Controller..."
        export SERVICE=dynamodb
        export RELEASE_VERSION=$(curl -sL https://api.github.com/repos/aws-controllers-k8s/${SERVICE}-controller/releases/latest | jq -r '.tag_name | ltrimstr("v")')
        helm install ack-$SERVICE-controller oci://public.ecr.aws/aws-controllers-k8s/$SERVICE-chart \
          --namespace $CONTROLLER_NAMESPACE \
          --create-namespace \
          --version=$RELEASE_VERSION \
          --set aws.region={{.AWS_REGION | default "eu-central-1"}} \
          --set aws.credentials.secretName=aws-creds \
          --set aws.credentials.secretKey=credentials \
          --set aws.credentials.profile=playground \
        
        # Install Lambda Controller
        echo "Installing Lambda Controller..."
        export SERVICE=lambda
        export RELEASE_VERSION=$(curl -sL https://api.github.com/repos/aws-controllers-k8s/${SERVICE}-controller/releases/latest | jq -r '.tag_name | ltrimstr("v")')
        helm install ack-$SERVICE-controller oci://public.ecr.aws/aws-controllers-k8s/$SERVICE-chart \
          --namespace $CONTROLLER_NAMESPACE \
          --create-namespace \
          --version=$RELEASE_VERSION \
          --set aws.region={{.AWS_REGION | default "eu-central-1"}} \
          --set aws.credentials.secretName=aws-creds \
          --set aws.credentials.secretKey=credentials \
          --set aws.credentials.profile=playground \
        
        # Install API Gateway V2 Controller
        echo "Installing API Gateway V2 Controller..."
        export SERVICE=apigatewayv2
        export RELEASE_VERSION=$(curl -sL https://api.github.com/repos/aws-controllers-k8s/${SERVICE}-controller/releases/latest | jq -r '.tag_name | ltrimstr("v")')
        helm install ack-$SERVICE-controller oci://public.ecr.aws/aws-controllers-k8s/$SERVICE-chart \
          --namespace $CONTROLLER_NAMESPACE \
          --create-namespace \
          --version=$RELEASE_VERSION \
          --set aws.region={{.AWS_REGION | default "eu-central-1"}} \
          --set aws.credentials.secretName=aws-creds \
          --set aws.credentials.secretKey=credentials \
          --set aws.credentials.profile=playground \
        
        # Install S3 Controller
        echo "Installing S3 Controller..."
        export SERVICE=s3
        export RELEASE_VERSION=$(curl -sL https://api.github.com/repos/aws-controllers-k8s/${SERVICE}-controller/releases/latest | jq -r '.tag_name | ltrimstr("v")')
        helm install ack-$SERVICE-controller oci://public.ecr.aws/aws-controllers-k8s/$SERVICE-chart \
          --namespace $CONTROLLER_NAMESPACE \
          --create-namespace \
          --version=$RELEASE_VERSION \
          --set aws.region={{.AWS_REGION | default "eu-central-1"}} \
          --set aws.credentials.secretName=aws-creds \
          --set aws.credentials.secretKey=credentials \
          --set aws.credentials.profile=playground \
        
        # Install CloudFront Controller
        echo "Installing CloudFront Controller..."
        export SERVICE=cloudfront
        export RELEASE_VERSION=$(curl -sL https://api.github.com/repos/aws-controllers-k8s/${SERVICE}-controller/releases/latest | jq -r '.tag_name | ltrimstr("v")')
        helm install ack-$SERVICE-controller oci://public.ecr.aws/aws-controllers-k8s/$SERVICE-chart \
          --namespace $CONTROLLER_NAMESPACE \
          --create-namespace \
          --version=$RELEASE_VERSION \
          --set aws.region={{.AWS_REGION | default "eu-central-1"}} \
          --set aws.credentials.secretName=aws-creds \
          --set aws.credentials.secretKey=credentials \
          --set aws.credentials.profile=playground \
        
        # Install IAM Controller
        echo "Installing IAM Controller..."
        export SERVICE=iam
        export RELEASE_VERSION=$(curl -sL https://api.github.com/repos/aws-controllers-k8s/${SERVICE}-controller/releases/latest | jq -r '.tag_name | ltrimstr("v")')
        helm install ack-$SERVICE-controller oci://public.ecr.aws/aws-controllers-k8s/$SERVICE-chart \
          --namespace $CONTROLLER_NAMESPACE \
          --create-namespace \
          --version=$RELEASE_VERSION \
          --set aws.region={{.AWS_REGION | default "eu-central-1"}} \
          --set aws.credentials.secretName=aws-creds \
          --set aws.credentials.secretKey=credentials \
          --set aws.credentials.profile=playground \

  setup:credentials:
    desc: Set up AWS credentials and service accounts
    cmds:
      - |
        AWS_CREDS=$(cat {{.AWS_CREDENTIALS_PATH}})
        kubectl -n {{.CONTROLLER_NAMESPACE}} create secret generic aws-creds \
          --from-literal=credentials="$AWS_CREDS" \
          --dry-run=client -o yaml | kubectl apply -f -

        AWS_CREDS=$(cat {{.AWS_CREDENTIALS_PATH}})
        kubectl create secret generic aws-creds \
          --from-literal=credentials="$AWS_CREDS" \
          --dry-run=client -o yaml | kubectl apply -f -          

  wait:ready:
    desc: Wait for KRO and ACK controllers to be ready
    cmds:
      - |
        echo "Waiting for Kro to be ready..."
        kubectl wait --for=condition=Available deployment/kro -n kro-system --timeout=300s
        
        echo "Waiting for ACK controllers to be ready..."
        kubectl wait --for=condition=Available deployment -l app.kubernetes.io/name=dynamodb-chart -n ack-system --timeout=300s || echo "DynamoDB controller not ready"
        kubectl wait --for=condition=Available deployment -l app.kubernetes.io/name=lambda-chart -n ack-system --timeout=300s || echo "Lambda controller not ready"
        kubectl wait --for=condition=Available deployment -l app.kubernetes.io/name=apigatewayv2-chart -n ack-system --timeout=300s || echo "API Gateway controller not ready"
        kubectl wait --for=condition=Available deployment -l app.kubernetes.io/name=s3-chart -n ack-system --timeout=300s || echo "S3 controller not ready"
        kubectl wait --for=condition=Available deployment -l app.kubernetes.io/name=cloudfront-chart -n ack-system --timeout=300s || echo "CloudFront controller not ready"
        kubectl wait --for=condition=Available deployment -l app.kubernetes.io/name=iam-chart -n ack-system --timeout=300s || echo "IAM controller not ready"

  deploy:
    desc: Deploy infrastructure for specified environment using KRO
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "dev"}}'
    cmds:
      - |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "Deploying infrastructure for environment: {{.ENVIRONMENT}}"
        echo "AWS Account ID: $ACCOUNT_ID"
        
        # Deploy IAM roles first
        echo "Deploying IAM roles..."
        kubectl apply -f iam-roles.yaml
        
        # Deploy the ResourceGroup definition
        echo "Deploying ResourceGroup definition..."
        kubectl apply -f resource-group.yaml
        
        # Wait for ResourceGraphDefinition to become active
        echo "Waiting for ResourceGraphDefinition to become active..."
        timeout=60
        while [ $timeout -gt 0 ]; do
          state=$(kubectl get resourcegraphdefinition/useradminmessagingstack.letsspeakgerman.io -o jsonpath='{.status.state}' 2>/dev/null || echo "Unknown")
          if [ "$state" = "Active" ]; then
            echo "ResourceGraphDefinition is now active"
            break
          fi
          echo "ResourceGraphDefinition state: $state, waiting..."
          sleep 2
          timeout=$((timeout-2))
        done
        
        if [ $timeout -le 0 ]; then
          echo "Timeout waiting for ResourceGraphDefinition to become active"
          kubectl describe resourcegraphdefinition/useradminmessagingstack.letsspeakgerman.io
          exit 1
        fi
        
        # Deploy environment-specific instance
        INSTANCE_FILE="instances/{{.ENVIRONMENT}}-instance.yaml"
        if [[ ! -f "$INSTANCE_FILE" ]]; then
          echo "Error: Instance file $INSTANCE_FILE not found"
          exit 1
        fi
        
        # Create a temporary file with substituted values
        TEMP_INSTANCE_FILE=$(mktemp)
        sed "s/ACCOUNT_ID/$ACCOUNT_ID/g" "$INSTANCE_FILE" > "$TEMP_INSTANCE_FILE"
        
        # Deploy the instance
        echo "Deploying {{.ENVIRONMENT}} instance..."
        kubectl apply -f "$TEMP_INSTANCE_FILE"
        
        # Clean up temporary file
        rm "$TEMP_INSTANCE_FILE"
        
        echo "Waiting for resources to be created..."
        sleep 10

  status:
    desc: Check deployment status
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "dev"}}'
    cmds:
      - |
        echo "=== KRO Status ==="
        kubectl get resourcegraphdefinition
        echo ""
        echo "=== ACK Controllers ==="
        kubectl get pods -n ack-system
        echo ""
        echo "=== UserAdminMessagingStack Instances ==="
        kubectl get useradminmessagingstack
        echo ""
        echo "=== Environment: {{.ENVIRONMENT}} ==="
        kubectl get useradminmessagingstack "user-admin-messaging-{{.ENVIRONMENT}}" -o yaml || echo "Environment {{.ENVIRONMENT}} not found"

  logs:
    desc: Show KRO and ACK controller logs
    cmds:
      - |
        echo "=== KRO Logs ==="
        kubectl logs -l app.kubernetes.io/name=kro -n kro-system --tail=20
        echo ""
        echo "=== ACK Controller Logs ==="
        kubectl logs -l app.kubernetes.io/part-of=ack-system -n ack-system --tail=20

  cleanup:
    desc: Clean up KRO resources for specified environment
    vars:
      ENVIRONMENT: '{{.ENVIRONMENT | default "dev"}}'
    cmds:
      - |
        echo "Cleaning up environment: {{.ENVIRONMENT}}"
        echo "kubectl delete resourcegroupinstance "user-admin-messaging-{{.ENVIRONMENT}}" --ignore-not-found=true"
        echo "Waiting for resources to be cleaned up..."
        echo "sleep 10"

  cleanup:all:
    desc: Clean up all KRO resources and uninstall controllers
    cmds:
      - task: cleanup
        vars:
          ENVIRONMENT: dev
      - task: cleanup
        vars:
          ENVIRONMENT: staging
      - task: cleanup
        vars:
          ENVIRONMENT: prod
      - |
        echo "Cleaning up ResourceGroup definition..."
        echo "kubectl delete resourcegroup user-admin-messaging-stack --ignore-not-found=true"
        
        echo "Uninstalling ACK controllers..."
        helm uninstall ack-dynamodb-controller -n ack-system || echo "DynamoDB controller not installed"
        helm uninstall ack-lambda-controller -n ack-system || echo "Lambda controller not installed"
        helm uninstall ack-apigatewayv2-controller -n ack-system || echo "API Gateway controller not installed"
        helm uninstall ack-s3-controller -n ack-system || echo "S3 controller not installed"
        helm uninstall ack-cloudfront-controller -n ack-system || echo "CloudFront controller not installed"
        helm uninstall ack-iam-controller -n ack-system || echo "IAM controller not installed"
        
        echo "Uninstalling KRO..."

        export KRO_VERSION=$(curl -sL \
          https://api.github.com/repos/kubernetes-sigs/kro/releases/latest | \
          jq -r '.tag_name | ltrimstr("v")'
        )
        echo $KRO_VERSION

        helm delete kro oci://registry.k8s.io/kro/charts/kro \
        --namespace kro-system \
        
        kubectl delete namespace ack-system --ignore-not-found=true
        kubectl delete namespace kro-system --ignore-not-found=true

  dev:shell:
    desc: Open a shell with kubectl configured for this environment
    cmds:
      - |
        echo "Opening shell with kubectl configured..."
        echo "Use 'kubectl get resourcegroupinstance' to check your deployments"
        bash