apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: useradminmessagingstack.letsspeakgerman.io
spec:
  schema:
    apiVersion: v1alpha1
    group: letsspeakgerman.io
    kind: UserAdminMessagingStack
    spec:
      parameters:
        environment: string | default="dev"
        region: string | default="eu-central-1"
        retainResources: boolean | default=false
        connectionManagerRoleArn: string | optional
        messageHandlerRoleArn: string | optional
        websocketApiEndpoint: string | optional
  resources:
    # DynamoDB Table for WebSocket connections
    - id: connectionsTable
      template:
        apiVersion: dynamodb.services.k8s.aws/v1alpha1
        kind: Table
        metadata:
          name: websocket-connections-${schema.spec.parameters.environment}
        spec:
          tableName: websocket-connections-${schema.spec.parameters.environment}
          attributeDefinitions:
            - attributeName: connectionId
              attributeType: S
            - attributeName: connectionType
              attributeType: S
          keySchema:
            - attributeName: connectionId
              keyType: HASH
          globalSecondaryIndexes:
            - indexName: ConnectionTypeIndex
              keySchema:
                - attributeName: connectionType
                  keyType: HASH
              projection:
                projectionType: ALL
          billingMode: PAY_PER_REQUEST

    # Lambda function for connection management
    - id: connectionManagerFunction
      template:
        apiVersion: lambda.services.k8s.aws/v1alpha1
        kind: Function
        metadata:
          name: connection-manager-${schema.spec.parameters.environment}
        spec:
          name: connection-manager-${schema.spec.parameters.environment}
          runtime: nodejs22.x
          handler: connection-manager.handler
          code:
            zipFile: ZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50KSA9PiB7CiAgY29uc29sZS5sb2coJ0Nvbm5lY3Rpb24gZXZlbnQ6JywgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpKTsKICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDAgfTsKfTs=
          environment:
            variables:
              CONNECTIONS_TABLE_NAME: websocket-connections-${schema.spec.parameters.environment}
          role: ${schema.spec.parameters.connectionManagerRoleArn}

    # Lambda function for message handling
    - id: messageHandlerFunction
      template:
        apiVersion: lambda.services.k8s.aws/v1alpha1
        kind: Function
        metadata:
          name: message-handler-${schema.spec.parameters.environment}
        spec:
          name: message-handler-${schema.spec.parameters.environment}
          runtime: nodejs22.x
          handler: message-handler.handler
          code:
            zipFile: ZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50KSA9PiB7CiAgY29uc29sZS5sb2coJ01lc3NhZ2UgZXZlbnQ6JywgSlNPTi5zdHJpbmdpZnkoZXZlbnQsIG51bGwsIDIpKTsKICByZXR1cm4geyBzdGF0dXNDb2RlOiAyMDAgfTsKfTs=
          environment:
            variables:
              CONNECTIONS_TABLE_NAME: websocket-connections-${schema.spec.parameters.environment}
              WEBSOCKET_API_ENDPOINT: ${schema.spec.parameters.websocketApiEndpoint}
          role: ${schema.spec.parameters.messageHandlerRoleArn}

    # WebSocket API
    - id: websocketApi
      template:
        apiVersion: apigatewayv2.services.k8s.aws/v1alpha1
        kind: API
        metadata:
          name: websocket-api-${schema.spec.parameters.environment}
        spec:
          name: user-admin-messaging-websocket-${schema.spec.parameters.environment}
          description: WebSocket API for real-time messaging between user and admin interfaces (${schema.spec.parameters.environment})
          protocolType: WEBSOCKET
          routeSelectionExpression: "$request.body.action"

    # WebSocket API Stage
    - id: websocketStage
      template:
        apiVersion: apigatewayv2.services.k8s.aws/v1alpha1
        kind: Stage
        metadata:
          name: websocket-stage-${schema.spec.parameters.environment}
        spec:
          apiRef:
            from:
              name: websocket-api-${schema.spec.parameters.environment}
          stageName: prod
          autoDeploy: true

    # S3 bucket for user interface
    - id: userInterfaceBucket
      template:
        apiVersion: s3.services.k8s.aws/v1alpha1
        kind: Bucket
        metadata:
          name: user-interface-bucket-${schema.spec.parameters.environment}
        spec:
          name: user-admin-messaging-user-${schema.spec.parameters.environment}-${schema.spec.parameters.region}
          publicAccessBlock:
            blockPublicACLs: true
            blockPublicPolicy: false
            ignorePublicACLs: true
            restrictPublicBuckets: false
          website:
            indexDocument:
              suffix: index.html
            errorDocument:
              key: error.html

    # CloudFront Distribution
    - id: cloudfrontDistribution
      template:
        apiVersion: cloudfront.services.k8s.aws/v1alpha1
        kind: Distribution
        metadata:
          name: website-distribution-${schema.spec.parameters.environment}
        spec:
          distributionConfig:
            comment: CloudFront distribution for user-admin messaging (${schema.spec.parameters.environment})
            defaultCacheBehavior:
              targetOriginID: "user-interface-origin"
              viewerProtocolPolicy: redirect-to-https
              cachePolicyID: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # CachingOptimized
              compress: true
            origins:
              items:
                - id: "user-interface-origin"
                  domainName: user-admin-messaging-user-${schema.spec.parameters.environment}-${schema.spec.parameters.region}.s3-website-${schema.spec.parameters.region}.amazonaws.com
                  customOriginConfig:
                    httpPort: 80
                    httpSPort: 443
                    originProtocolPolicy: http-only
            defaultRootObject: index.html
            customErrorResponses:
              items:
                - errorCode: 404
                  responseCode: "200"
                  responsePagePath: "/index.html"
                  errorCachingMinTTL: 1800
                - errorCode: 403
                  responseCode: "200"
                  responsePagePath: "/index.html"
                  errorCachingMinTTL: 1800
            enabled: true
            priceClass: PriceClass_100